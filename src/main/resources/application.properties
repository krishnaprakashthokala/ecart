
#####
#####
#
# MySQL Configuration for Railways
#
#####
#spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
#spring.datasource.url=jdbc:mysql://roundhouse.proxy.rlwy.net:58778/railway
#spring.datasource.username=root
#spring.datasource.password=-HbF5dh1Ag6HFHFHd5hE226dHHAc1E-e

spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.datasource.url=jdbc:mysql://nus_db:3306/luv2shop
#spring.datasource.url=jdbc:mysql://localhost:3306/luv2shop

spring.datasource.username=admin
spring.datasource.password=admin123
#spring.datasource.username=root
#spring.datasource.password=root

spring.jpa.show-sql=true
spring.jpa.hibernate.ddl-auto=create
#spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL5Dialect
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL8Dialect
hibernate.format_sql=true

spring.data.rest.base-path=/api

allowed.origins=http://nus_frontend:4200
#allowed.origins=http://localhost:4200

#spring.cache.type=redis
#spring.redis.host=nus_redis
#spring.redis.port=6379
#spring.redis.database=0
#allowed.origins=https://luv2shop-ecommerce.netlify.app

spring.data.rest.detection-strategy=ANNOTATED

okta.oauth2.client-id=0oac1xv78jEJHLiLn5d7
okta.oauth2.issuer=https://dev-68343085.okta.com/oauth2/default

#####
#
# HTTPS configuration
#
#####

# Server web port
server.port=8443

# QA Env Demo
#server.port=9898

# Enable HTTPS support (only accept HTTPS requests)
server.ssl.enabled=false

# Alias that identifies the key in the key store
server.ssl.key-alias=luv2code

# Keystore location
server.ssl.key-store=classpath:luv2code-keystore.p12

# Keystore password
server.ssl.key-store-password=secret

# Keystore format
server.ssl.key-store-type=PKCS12

#####
#
# Payment Processing with Stripe API
#
#####

stripe.key.secret=sk_test_51NaiSfJ7CqAb5XkllBY5ROYYuUFVcjm54NOmZxXIkaKXyMhEraDQmZj6PUtQRFKfIGuE5n3nARx14MoFZMpAHHMe00niN2kIBc


####
# Enable access to swagger ui '/swagger-ui/index.html' without token security
###

# Ignore security for all paths (/**)
spring.security.ignored=/**

# Configure the path matching strategy for Spring MVC
spring.mvc.pathmatch.matching-strategy=ANT_PATH_MATCHER

#connection pooling
#spring.datasource.tomcat.initial-size=15
#spring.datasource.tomcat.max-wait=20000
#spring.datasource.tomcat.max-active=
#spring.datasource.tomcat.max-idle=15
#spring.datasource.tomcat.min-idle=8
#spring.datasource.tomcat.default-auto-commit=true 

spring.kafka.bootstrap-servers=kafka:9092
#spring.kafka.bootstrap-servers=localhost:9092

spring.kafka.consumer.group-id=my-group-id

io.reflectoring.kafka.bootstrap-servers: kafka:9092
#io.reflectoring.kafka.bootstrap-servers: localhost:9092

io.reflectoring.kafka.topic-1: reflectoring-1
io.reflectoring.kafka.topic-2: reflectoring-2
io.reflectoring.kafka.topic-3: reflectoring-3
io.reflectoring.kafka.topic-4: reflectoring-user
logging.level.org.apache.kafka = WARN


#connection pooling
spring.datasource.type=org.apache.tomcat.jdbc.pool.DataSource

spring.datasource.tomcat.initial-size=15
spring.datasource.tomcat.max-wait=20000
spring.datasource.tomcat.max-active=50
spring.datasource.tomcat.max-idle=15
spring.datasource.tomcat.min-idle=8
spring.datasource.tomcat.default-auto-commit=true 




